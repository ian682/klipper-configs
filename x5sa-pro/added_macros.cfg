######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro SAFE_RETRACT]
description: Retract
gcode:
  SAVE_GCODE_STATE NAME=safe_retract

  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83 ;Relative extrusion
    G91 ;Relative positioning

    G10 ;Retract filament
    G1 Z0.2 F2400 ;Raise Z
    G1 E-2 F300 ;Retract filament 2mm to prevent oozing
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_retract

[gcode_macro SAFE_PARK]
description:
  "Park the print head in a safe location
  @param {float} [X=200] - The target hotend temp
  @param {float} [Y=200] - The target hotend temp
  @param {bool} [Z_MOVE=true] - Whether or not to move the Z axis. This can be useful if you've already moved on Z"
gcode:
  SAVE_GCODE_STATE NAME=safe_park

  ##### set park positon for x and y #####
  # default is your max position from your printer.cfg
  {% set x_park = params.X|default(printer.toolhead.axis_minimum.x + 5.0)|float %}
  {% set y_park = params.Y|default(printer.toolhead.axis_maximum.y - 5.0)|float %}
  {% set should_park_z = params.Z_MOVE|default('true')|string %}
  ##### calculate safe lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set current_z = printer.toolhead.position.z|float %}
  {% set jump_z = 20.0|float %}
  {% if (current_z + jump_z) < max_z %}
    {% set z_safe = (current_z + jump_z) %}
  {% else %}
    {% set z_safe = max_z %}
  {% endif %}
  ##### end of definitions #####

  {% if "xyz" in printer.toolhead.homed_axes %}
    G90 ;Use absolute coordinates
    {% if should_park_z|lower == 'true' %}
      G1 Z{z_safe} F900
    {% endif %}
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_park

# [gcode_macro G27]
# description: "Marlin's Park Toolhead"
# gcode:
#   {% if 'P' in params %}
#     {% if params.P == 0 %}
#       SAFE_PARK
#     {% elif params.P == 1 %}
#       # TODO: read Z park position
#       G1 Z{z} F900
#       SAFE_PARK Z_MOVE=false
#     {% elif params.P == 2 %}
#       SAFE_PARK
#     {% endif %}
#   {% endif %}


# call from slicer printer start gcode; for example, with PrusaSlicer:
#   START_PRINT EXTRUDER_TEMP=[first_layer_temperature] BED_TEMP=[first_layer_bed_temperature] FILAMENT_TYPE=[filament_type]
[gcode_macro START_PRINT]
    ; gcode parameters for area bed mesh
    variable_parameter_AREA_START : 0,0
    variable_parameter_AREA_END : 0,0
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true) %}
    {% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE %}
    # the rest of your start macro here
    ## reset various states to configured or safe defaults
    CLEAR_PAUSE

    # Reset speed and extrusion rates, in case they were manually changed
    M220 S100
    M221 S100

    # Metric values
    G21

    # Absolute positioning
    G90

    # Set extruder to absolute mode
    M82

    EUCLID_PROBE_BEGIN_BATCH

    # Home
    G28

    # Wait for bed to heat up
    M117 Heating bed...
    M190 S{ bed_temp }

    # @TODO enable bed tilt adjustment if necessary for your printer.
    # * Z_TILT_ADJUST is for [z_tilt] config
    # * QUAD_GANTRY_LEVEL is for [quad_gantry_level] config

    # M117 Adjusting for tilt...
    # Z_TILT_ADJUST

    # M117 Performing gantry leveling...
    # QUAD_GANTRY_LEVEL

    # Home again as Z will have changed after adjustment and bed heating.
    M117 Rehoming after leveling...
    G28 Z

    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}

    EUCLID_PROBE_END_BATCH

    M117 Setting PA and Retraction...

    #PLA 0.0515
    #PLA retraction 0.260
    #PLA z-offset
    #PETG 0.2087
    #PETG retraction 0.575
    #PETG z-offset
    #ABS 0.0742
    #ABS retraction 0.06
    #ABS z-offset

    #set pressure advence and retraction by filament type
    {% if FILAMENT_TYPE == 'PLA' %}   
        # PRESSURE ADVANCE
        SET_PRESSURE_ADVANCE ADVANCE=0.0515
        SET_RETRACTION RETRACT_LENGTH=0.50
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% elif FILAMENT_TYPE == 'PETG' %}   
        # PRESSURE ADVANCE
        SET_PRESSURE_ADVANCE ADVANCE=0.075
        SET_RETRACTION RETRACT_LENGTH=0.3
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% elif FILAMENT_TYPE == 'PET' %}   
        # PRESSURE ADVANCE
        SET_PRESSURE_ADVANCE ADVANCE=0.075
        SET_RETRACTION RETRACT_LENGTH=0.3
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% elif FILAMENT_TYPE == 'ABS' %}
        # PRESSURE ADVANCE
        SET_PRESSURE_ADVANCE ADVANCE=0.0742
        SET_RETRACTION RETRACT_LENGTH=0.2
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% elif FILAMENT_TYPE == 'ASA' %}
        # PRESSURE ADVANCE
        SET_PRESSURE_ADVANCE ADVANCE=0.0742
        SET_RETRACTION RETRACT_LENGTH=0.2
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% elif FILAMENT_TYPE == 'NYLON' %}
        # PRESSURE ADVANCE  
        SET_PRESSURE_ADVANCE ADVANCE=0.0742
        SET_RETRACTION RETRACT_LENGTH=0.06
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% else %}   
        # Other kind of filament we reset to default
        SET_PRESSURE_ADVANCE ADVANCE=0.0515
        SET_RETRACTION RETRACT_LENGTH=0.260
        # Z-OFFSET BY FILLAMENT
        # SET_GCODE_OFFSET Z=+0.075
    {% endif %}

    # Wait for extruder to heat up
    M109 S{ extruder_temp }

    M117 Purging nozzle...

    ADAPTIVE_PURGE
    
    M117 Printing...

    M83
    G92 E0


# call from slicer printer start gcode; for example, with PrusaSlicer:
# END_PRINT
[gcode_macro END_PRINT]
description: "G-code to run at the end of a print. Replace your slicer's end G-code with this"
gcode:
  M104 S0 ;Turn-off hotend
  M106 S0 ;Turn-off fan
  M140 S0 ;Turn-off bed

  SAFE_RETRACT
  SAFE_PARK

  M84 X Y E ;Disable all steppers but Z